FIRST ::= VAR_DEF FIRST 
FIRST ::= FN_DEF FIRST 
FIRST ::= ε

CODE ::= VAR_DEF 
CODE ::= CALL_DEF 
CODE ::= IF_DEF 
CODE ::= ELSE_DEF
CODE ::= FN_DEF 
CODE ::= WHILE_DEF
CODE ::= RETURN_DEF

NEXTCODE ::= CODE NEXTCODE 
NEXTCODE ::= ε

VAR_DEF ::= TYPE t_id ASSIGN
FN_DEF ::= t_pub t_fn t_id t_( PARAM t_) SCOPE 

CALL_DEF ::= t_id CALL_EXT
IF_DEF ::= t_if t_( EXPRESION t_) IF_EXT SCOPE 
ELSE_DEF ::= t_else SCOPE 
WHILE_DEF ::= t_while t_( EXPRESION t_) SCOPE
RETURN_DEF ::= t_ret EXPRESION

IF_EXT ::= ε
IF_EXT ::= t_| t_id t_| 
CALL_EXT ::= t_( ARG t_) 
CALL_EXT ::= ASSIGN

SCOPE ::= ε
SCOPE ::=  t_{ NEXTCODE  t_} 

ASSIGN ::= ε
ASSIGN ::= t_= ASSIGN_EXT 
ASSIGN ::= t_: VAL_TYPE ASSIGN_EXT
ASSIGN_EXT ::= EXPRESION
ASSIGN_EXT ::= t_import t_( string t_)

ARG ::= ε
ARG ::= ARG_LIST
ARG_LIST ::= t_id ARGS
ARG_LIST ::= string ARGS
ARGS ::= ε
ARGS ::= , ARG_LIST

PARAM ::= ε
PARAM ::= t_id t_: VAL_TYPE PARAMS
PARAMS ::= ε
PARAMS ::= t_,  t_id t_: VAL_TYPE PARAMS

VAL_TYPE ::= i32
VAL_TYPE ::= f64
VAL_TYPE ::= u8
VAL_TYPE ::= void

TYPE ::= var
TYPE ::= const