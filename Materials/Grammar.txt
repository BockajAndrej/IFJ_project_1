FIRST ::= VAR_DEF FIRST 
FIRST ::= FN_DEF FIRST 
FIRST ::= ε

STATEMENT ::= VAR_DEF
STATEMENT ::= CALL_DEF 
STATEMENT ::= IF_DEF 
STATEMENT ::= ELSE_DEF
STATEMENT ::= WHILE_DEF
STATEMENT ::= RETURN_DEF

VAR_DEF ::= TYPE t_id ASSIGN 
FN_DEF ::= t_pub t_fn t_id t_( PARAM t_) SCOPE 

CALL_DEF ::= t_id CALL_EXT
IF_DEF ::= t_if t_( EXPRESION t_) IF_EXT  
ELSE_DEF ::= t_else SCOPE 
WHILE_DEF ::= t_while t_( EXPRESION t_) SCOPE
RETURN_DEF ::= t_ret EXPRESION

IF_EXT ::= SCOPE
IF_EXT ::= t_| t_id t_| SCOPE
CALL_EXT ::= t_( ARG t_) 
CALL_EXT ::= ASSIGN

SCOPE ::= ε
SCOPE ::=  t_{ STATEMENT t_} 

ASSIGN ::= t_;
ASSIGN ::= t_=  t_import t_( string t_) t_;
ASSIGN ::= t_: VAL_TYPE EXPRESION t_;

ARG ::= ε
ARG ::= ARG_LIST
ARG_LIST ::= t_id ARGS
ARG_LIST ::= string ARGS
ARGS ::= ε
ARGS ::= , ARG_LIST

PARAM ::= t_)
PARAM ::= t_id t_: VAL_TYPE PARAM
PARAM ::= t_,  t_id t_: VAL_TYPE PARAM

VAR_TYPR ::= var
VAR_TYPR ::= const
VAL_TYPE ::= i32
VAL_TYPE ::= f64
VAL_TYPE ::= u8
FN_TYPE ::= VAL_TYPE 
FN_TYPE ::= void