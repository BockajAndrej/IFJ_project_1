FIRST ::= VAR_DEF FIRST 
FIRST ::= CONST_DEF FIRST 
FIRST ::= FN_DEF FIRST 
FIRST ::= t_EOF

STATEMENT ::= VAR_DEF STATEMENT
STATEMENT ::= CONST_DEF STATEMENT
STATEMENT ::= CALL_DEF STATEMENT
STATEMENT ::= IF_DEF STATEMENT
STATEMENT ::= ELSE_DEF STATEMENT
STATEMENT ::= WHILE_DEF STATEMENT
STATEMENT ::= RETURN_DEF STATEMENT
STATEMENT ::= t_}

VAR_DEF ::= t_var t_id ASSIGN_VAR
CONST_DEF ::= t_const t_id CONST_EXT
FN_DEF ::= t_pub t_fn t_id t_( PARAM t_) SCOPE 

CALL_DEF ::= t_id CALL_EXT
IF_DEF ::= t_if t_( EXPRESSION t_) IF_EXT  
ELSE_DEF ::= t_else SCOPE 
WHILE_DEF ::= t_while t_( EXPRESSION t_) SCOPE
RETURN_DEF ::= t_ret EXPRESSION

CONST_EXT ::= t_: VAL_TYPE t_= EXPRESSION
CONST_EXT ::= t_= ASSIGN_CONST
IF_EXT ::= SCOPE
IF_EXT ::= t_| t_id t_| SCOPE
CALL_EXT ::= t_( ARG t_) 
CALL_EXT ::= t_= EXPRESSION
CALL_EXT ::= t_: VAL_TYPE t_= EXPRESSION
CALL_EXT ::= t_. CALL_OBJ
CALL_OBJ ::= t_id t_( ARG t_) t_;

SCOPE ::=  t_{ STATEMENT 

ASSIGN_VAR ::= t_;
ASSIGN_VAR ::= t_: VAL_TYPE t_= EXPRESSION t_;
ASSIGN_VAR ::= t_= EXPRESSION t_;
ASSIGN_CONST ::= EXPRESSION
ASSIGN_CONST ::= t_import t_( string t_) t_;

EXPRESSION ::= ;
EXPRESSION ::= t_)

ARG ::= t_id ARGS
ARG ::= string ARGS
ARG ::= EXPRESSION ARGS
ARGS ::= t_)
ARGS ::= , ARG

PARAM ::= t_)
PARAM ::= t_id t_: VAL_TYPE PARAM
PARAM ::= t_, t_id t_: VAL_TYPE PARAM

VAR_TYPE ::= var
VAR_TYPE ::= const
VAL_TYPE ::= i32
VAL_TYPE ::= f64
VAL_TYPE ::= u8
FN_TYPE ::= VAL_TYPE 
FN_TYPE ::= void